input {
	pipeline{
		address => "exim-pipeline"
	}
}

filter{
	grok{
	 	#patterns_dir => ["/etc/logstash/patterns/"]

		match => {"message" => "%{EXIM_CASE_REJECTED_1}"}
		match => {"message" => "%{EXIM_CASE_REJECTED_2}"}
		add_field => [ "event.action", "rejected" ]
	}


	grok{
		match => {"message" => "%{EXIM_CASE_LOGIN_FAILED}"}
		add_field => [ "event.action", "login_failed" ]
	}
	grok{
		match => {"message" => "%{EXIM_CASE_DROPPED}"}
		add_field => [ "event.action", "droppe"]
	}
	grok{
		#patterns_dir => ["/etc/logstash/patterns/"]
		match => {"message" => "%{EXIM_CASE_TLS_ERROR}"}
		add_field => [ "event.action", "tls_error" ]
	}
    grok{
    	match => {"message" => "%{EXIM_CASE_SENDER_VERIFY_FAILED}"}
    	add_field => [ "event.action", "sender_verify_failed" ]
    }
	#DATE
	if!([exim.date]){
		grok{
			match => {"message" => "%{EXIM_DATE:exim.date}"}
		}
	}
	date{
			match => ["exim.date", "yyyy-MM-dd HH:mm:ss"]
			timezone => "Europe/Rome"
			remove_field => "exim.date"
	}
	
	
	
	grok{
		match => {"message" => "%{EXIM_CASE_SMTP_TIMEOUT"}
		add_field => [ "event.action", "smtp_timeout" ]
	}
	
	grok{
		match => {"message" => "TLS error on connection from %{EXIM_INTERFACE} %{GREEDYDATA:exim.log.info}"}
		add_field => [ "event.action", "tls_error" ]
	}
	grok{
		#2020-08-18 08:33:44 no host name found for IP address 103.38.178.214
		match => {"message" => "%{EXIM_CASE_HOST_NOT_FOUND}"}
		add_field => [ "event.action", "host_not_found" ]
	}
	
	
	grok{	
		match => { "message" => "%{EXIM_CASE_SMTP_CONNECTION1}" }
		#match => {"message" => "%{EXIM_CASE_SMTP_CONNECTION2}"}
	    add_field => [ "event.action", "smpt_connection" ] 
	}
	grok {
	    match => { "message" => "%{EXIM_MSGID:event.id} Completed" }
	    add_field => [ "event.action", "completed" ]
	}

	## for next parsing
	grok {
	    match => { "message" => "%{EXIM_MSGID:event.id} %{EXIM_FLAGS:exim.mail.flag}"}
	}

    grok{
    	match => {"message" => "%{EXIM_EXCLUDE_TERMS}"}
    	add_field => ["event.action", "other"]
    }

    if [exim.mail.flag] == "<=" {
        grok { match => { "message" => "<= %{EXIM_SENDER_EMAIL} %{EXIM_REMOTE_HOST}" } }
        grok { match => { "message" => "%{EXIM_PROTOCOL}" } }
        grok { match => { "message" => "%{EXIM_MSG_SIZE}" } }
        grok { match => { "message" => "%{EXIM_HEADER_ID}" } }
        grok { match => { "message" => "%{EXIM_TLS_SUITE}" } }
        grok { match => { "message" => "%{EXIM_SUBJECT}" } }
        grok { match => { "message" => "(from|for) %{EXIM_RECEIVER_EMAIL}"} }

        mutate {
                add_field => {"event.action" => "received"} 
                remove_field => ["exim.mail.flag"]
        }
    }else if [exim.mail.flag] == "=>" or [exim.mail.flag] == "->" {
        grok {  match => { "message" => "=> %{EXIM_LOGIN_USER} %{EXIM_SENDER_EMAIL}" } }
        #grok {  match => { "message" => "%{EXIM_REMOTE_HOST}" } } 
        grok {  match => { "message" => "%{EXIM_ROUTER}" } }
        grok {  match => { "message" => "%{EXIM_TRANSPORT} " } }
        grok {  match => { "message" => "%{EXIM_MSG_SIZE}" } }
        #grok {  match => { "message" => "%{EXIM_SMTP_CONFIRM}" } }

        mutate {
                add_field => ["event.action", "delivered"] 
                remove_field => ["exim.mail.flag"]
        }

    }else if [exim.mail.flag] == "**" {
            grok {  match => { "message" => "\*\* %{EXIM_SENDER_EMAIL}" } }
            grok {  match => { "message" => "%{EXIM_ROUTER}" } }
        	grok {  match => { "message" => "%{EXIM_TRANSPORT}: %{DATA:error.type}:%{EXIM_SENDER_EMAIL}: %{GREEDYDATA:error.message}"} }
        	grok { match => {"message" => "DNSBL:RBL 521< %{IP:server.ip} >_is_blocked%{GREEDYDATA:dnsbl.info}"}}
        	grok {match => {"message" => "Domain %{EXIM_HOST_INFO} has exceeded the max defers and failures per hour %{GREEDYDATA:limit_exceeded} allowed. %{GREEDYDATA:event.action} "}}

        	if([server.ip] and [dnsbl.info]){
        		mutate{
        			add_tag => ["dnsbl"]
        		}
        	}

        	if([limit_exceeded]){
        		mutate{
        			add_tag => ["limit_exceeded"]
        		}
        	}

            mutate {
                    add_field => [ "event.action", "failed" ]
                    remove_field => ["exim.mail.flag"]
            }

    }else if [exim.mail.flag] == "==" {
        grok {  match => { "message" => "== %{EXIM_SENDER_EMAIL}" } }
        grok {  match => { "message" => "%{EXIM_ROUTER}" } }
        grok {  match => { "message" => "%{EXIM_TRANSPORT} %{GREEDYDATA:exim.error.info}" } }
        mutate {
                add_field => [ "event.action", "deffered" ]
                remove_field => ["exim.mail.flag"]
        }
	}

	if([source.ip]){
		geoip {
			source => "source.ip" 
		}
	}

	if (![event.action]){
		mutate{
			add_field => {"event.action" => "parsing_error"}
		}
	}else{
		mutate{
			add_tag => ["%{event.action}"]
			remove_tag => ["_grokparsefailure"]
		}
	}
	mutate{
		add_field => {"event.kind" => "event"}
		add_field => {"event.category" => "email"}
		add_field => {"event.module" => "exim"} 
	}
}

output{
	stdout {codec => rubydebug}
	if([event.id]){
		elasticsearch{
			ssl => "true"
			ssl_certificate_verification => "true"
			cacert => "/etc/logstash/ssl/fullchain.pem"
			user => "elastic"
			password => "lfos8PQlplAHQYaKoCBl"
			hosts=> "https://linoc.utixo.net:29200"
			index => "linoc-log-mail-exim-%{exim.year}-%{exim.month}-%{exim.day}"
		}	
		#elasticsearch{
		#	document_id => "%{event.id}-%{[host][hostname]}"
		#	action => "update"
		#	doc_as_upsert => "true"
		#	ssl => "true"
		#	ssl_certificate_verification => "true"
		#	cacert => "/etc/logstash/ssl/fullchain.pem"
		#	user => "elastic"
		#	password => "lfos8PQlplAHQYaKoCBl"
		#	hosts=> "https://noc.utixo.net:9200"
		#	index => "email"
		#}	
	}
}