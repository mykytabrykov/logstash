input {
	pipeline{
		address => "exim-pipeline"
	}
}

filter{
	#======= DATE =====
	grok{
		match => {"message" => "%{EXIM_TIMESTAMP:exim.timestamp} %{GREEDYDATA"}
	}
	date{
			match => ["exim.timestamp", "yyyy-MM-dd HH:mm:ss"]
			timezone => "Europe/Rome"
			remove_field => "exim.timestamp"
	}

	#==== Login Failed =====
	grok{
		match => {"message" => "dovecot_(login|plain) authenticator failed for (%{EXIM_HOST_INFO}\s)?%{EXIM_LOGIN_USER} %{EXIM_INTERFACE}: %{NUMBER:[exim][error][code]} %{EXIM_ERROR_REASON:[exim][error][reason]}(\s%{EXIM_SETID})?"}
		add_field => {
			"[event][kind]" => "event"
			"[event][category]" => "authentication"
			"[event][type]" => "access"
			"[event][outcome]" => "failure"
			"[event][action]" => "login"
			"pyAnalyzed" => "false"
		}
	}

	## for next parsing
	grok {
	    match => { "message" => "%{EXIM_MSGID:[event][id]} %{EXIM_FLAGS:[exim][flag]}"}
	}

    if [exim][flag] == "<=" {
        grok { 
        	match => { 
	        	"message" => [
	        		"<= %{EXIM_SENDER_EMAIL} %{EXIM_REMOTE_HOST}",
	        		"%{EXIM_PROTOCOL}",
	        		"%{EXIM_MSG_SIZE}",
	        		"%{EXIM_HEADER_ID}",
	        		"%{EXIM_AUTH}",
	        		"%{EXIM_TLS_SUITE}",
	        		"%{EXIM_SUBJECT}",
	        		"(from|for) %{EXIM_RECEIVER_EMAIL}
	        	]
	        	add_field => {
					"[event][kind]" => "event"
					"[event][category]" => "email"
					"[event][type]" => "transaction"
					"[event][outcome]" => "arrived"
					"[event][action]" => "new-email-received"
					"pyAnalyzed" => "false"
				}
				remove_field => [exim][flag]
        	 } 
        }
    }else if [exim][flag] == "=>" or [exim][flag] == "->" {
        grok {  
        	match => { 
        		"message" => [
        			"(=>|->)(\s%{USER:[destination][user][name]})? %{EXIM_RECEIVER_EMAIL}",
        			"H=%{NOTSPACE:[destnation][hostname]} \[%{IP:[destination][ip]}\]",
        			"%{EXIM_ROUTER}",
        			"%{EXIM_TRANSPORT}",
        			"%{EXIM_MSG_SIZE}"
        		]
			} 
			add_field => {
				"[event][kind]" => "event"
				"[event][category]" => "email"
				"[event][type]" => "transaction"
				"[event][outcome]" => "send"
				"[event][action]" => "email-sending"
				"pyAnalyzed" => "false"
				}
				remove_field => [exim][flag]
		}
    }else if [exim][flag] == "**" { ## da completare
            grok {  match => { "message" => "\*\* %{EXIM_RECEIVER_EMAIL}" } }
            grok {  match => { "message" => "%{EXIM_ROUTER}" } }

           	mutate {
                add_field => [ "event.action", "failed" ]
                remove_field => [exim][flag]
            }

    }else if [exim.mail.flag] == "==" {
        grok {  match => { "message" => "== %{EXIM_SENDER_EMAIL}" } }
        grok {  match => { "message" => "%{EXIM_ROUTER}" } }
        grok {  match => { "message" => "%{EXIM_TRANSPORT} %{GREEDYDATA:exim.error.info}" } }
        mutate {
                add_field => [ "event.action", "deferred" ]
                remove_field => {[exim][flag]}
        }
	}

	if([source.ip]){
		geoip {
			source => "source.ip" 
		}
	}

	if !([event][action]){
		mutate{
			add_field => {"event.action" => "parsing_error"}
		}
	}else{
		mutate{
			add_tag => ["%{event.action}"]
			remove_tag => ["_grokparsefailure"]
		}
	}
}

output{
	if "_grokparsefailure" in [tags]{
		file { 
			path => "/var/log/logstash/exim_grok_failed.txt"
			codec => line { format => "Exim failed log: %{message}"}
		}
	}
	stdout {codec => rubydebug}
	elasticsearch{
		ssl => "true"
		ssl_certificate_verification => "true"
		cacert => "/etc/logstash/ssl/fullchain.pem"
		user => "elastic"
		password => "lfos8PQlplAHQYaKoCBl"
		hosts=> "https://linoc.utixo.net:29200"
		index => "exim-mainlog-%{+YYYY.MM.dd}"
	}
}